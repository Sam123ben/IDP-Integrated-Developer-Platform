terraform {
  required_providers {
    {{ .Provider.Name }} = {
      source  = "{{ .Provider.Source }}"
      version = "{{ .Provider.Version }}"
    }
  }
  required_version = "{{ .TerraformVersion }}"
}

# Configure the {{ .Provider.Name }} provider
provider "{{ .Provider.Name }}" {
  {{- if eq .Provider.Name "azurerm" }}
  features {}

  subscription_id = var.azure_subscription_id
  tenant_id       = var.azure_tenant_id
  client_id       = var.azure_client_id
  {{- if .Provider.AuthVariables.client_secret }}
  client_secret   = var.azure_client_secret
  {{- end }}

  {{- else if eq .Provider.Name "aws" }}
  region = var.aws_region

  {{- if .Provider.AuthVariables.web_identity_token_file }}
  assume_role_with_web_identity {
    role_arn               = var.aws_role_arn
    web_identity_token_file = var.aws_oidc_token_file
    session_name           = "terraform-session"
  }
  {{- else }}
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
  {{- end }}

  {{- else if eq .Provider.Name "google" }}
  {{- if .Provider.AuthVariables.workload_identity_pool_provider }}
  impersonate_service_account     = var.gcp_service_account_email
  workload_identity_pool_provider = var.gcp_workload_identity_provider
  project                         = var.gcp_project_id
  region                          = var.gcp_region
  {{- else }}
  credentials = file(var.gcp_credentials_file)
  project     = var.gcp_project_id
  region      = var.gcp_region
  {{- end }}
  {{- end }}
}