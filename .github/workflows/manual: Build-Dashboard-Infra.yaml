name: Build DevOps Dashboard Infra

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Enables manual triggering of the workflow

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up HashiCorp Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false  # Recommended for remote backends

      # Step 3: Set up Azure CLI
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 4: Check and Create Resource Group, Storage Account, and Blob Container
      - name: Create Azure Resource Group and Storage for Terraform State
        id: setup_azure_storage
        run: |
          # Check if Resource Group exists
          if ! az group show --name "dashboard-state-rg" &>/dev/null; then
            echo "Creating resource group: dashboard-state-rg"
            az group create --name "dashboard-state-rg" --location "eastus"
          else
            echo "Resource group 'dashboard-state-rg' already exists."
          fi

          # Check if Storage Account exists
          if ! az storage account show --name "dashboardstatestg" --resource-group "dashboard-state-rg" &>/dev/null; then
            echo "Creating storage account: dashboardstatestg"
            az storage account create --name "dashboardstatestg" --resource-group "dashboard-state-rg" --location "eastus" --sku Standard_LRS
          else
            echo "Storage account 'dashboardstatestg' already exists."
          fi

          # Retrieve Storage Account key and set as output
          AZURE_STORAGE_KEY=$(az storage account keys list --resource-group "dashboard-state-rg" --account-name "dashboardstatestg" --query "[0].value" --output tsv)
          echo "::set-output name=AZURE_STORAGE_KEY::$AZURE_STORAGE_KEY"

          # Check if Blob Container exists
          if ! az storage container show --name "dashboard-tfstate" --account-name "dashboardstatestg" --account-key "$AZURE_STORAGE_KEY" &>/dev/null; then
            echo "Creating blob container: dashboard-tfstate"
            az storage container create --name "dashboard-tfstate" --account-name "dashboardstatestg" --account-key "$AZURE_STORAGE_KEY"
          else
            echo "Blob container 'dashboard-tfstate' already exists."
          fi

      # Step 5: Initialize Terraform with remote backend configuration
      - name: Terraform Init
        run: terraform init
        working-directory: infra_env_dashboard/infra-automation
        env:
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ steps.setup_azure_storage.outputs.AZURE_STORAGE_KEY }}

      # Step 6: Terraform Plan
      - name: Terraform Plan
        run: terraform plan
        working-directory: infra_env_dashboard/infra-automation
        env:
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ steps.setup_azure_storage.outputs.AZURE_STORAGE_KEY }}
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
          TF_VAR_resource_group_name: "dashboard-service-rg"

      # Step 7: Terraform Apply (only for main branch pushes, requires confirmation otherwise)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: infra_env_dashboard/infra-automation
        env:
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ steps.setup_azure_storage.outputs.AZURE_STORAGE_KEY }}
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
          TF_VAR_resource_group_name: "dashboard-service-rg"