// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import (
	"os"
	"github.com/swaggo/swag"
)

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/company": {
            "get": {
                "description": "Retrieve a list of companies from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Get a list of companies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Company"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/backend_services_fetch_company_details_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new company and store it in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Create a new company",
                "parameters": [
                    {
                        "description": "Company data",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Company"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Company"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/backend_services_fetch_company_details_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/backend_services_fetch_company_details_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/infra-types": {
            "get": {
                "description": "Retrieves all infrastructure types (e.g., INTERNAL, CUSTOMER)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Infra Types"
                ],
                "summary": "Get infrastructure types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InfraType"
                            }
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/internal-env-details": {
            "get": {
                "description": "Retrieves environment details for a specific product and environment group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Internal Environment"
                ],
                "summary": "Fetch internal environment details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "product",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Environment Name",
                        "name": "EnvName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "environmentDetails",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "backend_services_fetch_company_details_models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Company": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.InfraType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Section"
                    }
                }
            }
        },
        "models.Section": {
            "type": "object",
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "infra_type_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// Helper function to get the Swagger host dynamically
func getHost() string {
    host := os.Getenv("SWAGGER_HOST")
    if host == "" {
        return "localhost:8080" // Default to localhost for local development
    }
    return host
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
    Version:          "1.0",
    Host:             getHost(), // Use dynamic host configuration
    BasePath:         "/api",
    Schemes:          []string{"https"},
    Title:            "Unified Backend API",
    Description:      "Unified API for Company, Infra Types, and Internal Environment Details services.",
    InfoInstanceName: "swagger",
    SwaggerTemplate:  docTemplate,
    LeftDelim:        "{{",
    RightDelim:       "}}",
}

func init() {
    swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}